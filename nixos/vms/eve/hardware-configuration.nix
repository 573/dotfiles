# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, ... }:

with builtins;
let

  inherit ((import ./network.nix) {inherit lib;})
    containers lxcContainers;

  zfsMapping = {
    "zroot/home" = "/home";
    "zroot/tmp" = "/tmp";
    "zroot/docker" = "/var/lib/docker";
    "zroot/lxc" = "/lxc";
    "zroot/data" = "/data";
    "zroot/data/backup" = "/data/backup";
    "zroot/data/backup/devkid" = "/data/backup/devkid";
    "zroot/data/pacman" = "/data/pacman";
    "zroot/data/pyload" = "/lxc/pyload/rootfs/var/lib/pyload";
  } // (lib.mapAttrs' (name: _: {
    name = "zroot/lxc/${name}";
    value = "/lxc/${name}/rootfs";
  }) lxcContainers);

  zfsMounts = map (fs: {
    mountPoint = zfsMapping.${fs};
    device = fs;
    fsType = "zfs";
    options = ["nofail"];
  }) (attrNames zfsMapping);

  foldAttr = op: nul: attr:
    foldl' (nul: key: op nul key attr.${key}) nul (attrNames attr);

  bindMounts =
    foldl' (n: toContainer:
      foldAttr (n: fromContainer: mountFrom:
        foldAttr (n: source: dest: [{
            device = "/lxc/${fromContainer}/rootfs/${source}";
            mountPoint = "/lxc/${toContainer.name}/rootfs/${if isString dest then dest else source}";
            fsType = "none";
            options = ["bind" "nofail"];
          }] ++ n
        ) n mountFrom
      ) n (toContainer.mounts or {})
    ) [] (attrValues containers);

in {
  imports =
    [ <nixpkgs/nixos/modules/profiles/qemu-guest.nix>
    ];

  boot = {
    initrd = {
	    availableKernelModules = [ "ata_piix" "uhci_hcd" "virtio_pci" "sd_mod" "sr_mod" ];
	    luks.devices = [ { name = "root"; device = "/dev/sda2"; } ];
	    supportedFilesystems = [ "zfs" ];
    };
    kernelParams = [ "systemd.legacy_systemd_cgroup_controller=yes" ];
  };

  fileSystems = [
    { mountPoint = "/boot";
      device = "/dev/disk/by-uuid/56FC-E60D";
      fsType = "vfat";
      options = ["nofail"];
      }
    { mountPoint = "/";
      device = "zroot/root";
      fsType = "zfs";
      }
  ] ++ zfsMounts ++ bindMounts;

  nix.maxJobs = lib.mkDefault 8;


}
