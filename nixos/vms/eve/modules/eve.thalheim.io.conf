template Service "eve-service" {
  max_check_attempts = 5
  check_interval = 1m
  retry_interval = 30s
  command_endpoint = "icingamaster.bsd.services"
}

template Service "eve-http-service" {
  import "eve-service"
  check_command = "http"
  vars.http_sni = true
  vars.http_onredirect = "follow"
  vars.http_ssl_force_tlsv1_2 = true
}

template Service "eve-http4-service" {
  import "eve-http-service"
  vars.http_ipv4 = true
}

template Service "eve-http6-service" {
  import "eve-http-service"
  vars.http_ipv6 = true
}

template Host "eve-host" {
  max_check_attempts = 3
  check_interval = 1m
  retry_interval = 30s
  check_command = "hostalive"
}

apply Service "SMTP v4 (eve)" {
  import "eve-service"
  check_command = "smtp"
  vars.smtp_port = "25"
  assign where host.name == "eve.thalheim.io"
}

apply Service "SMTP Submission v4 (eve)" {
  import "eve-service"
  check_command = "smtp"
  vars.smtp_port = "587"
  assign where host.name == "eve.thalheim.io"
}

apply Service "SMTP v6 (eve)" {
  import "eve-service"
  check_command = "smtp"
  vars.smtp_port = "25"
  vars.smtp_ipv6 = true
  assign where host.name == "eve.thalheim.io"
}

apply Service "SMTP Submission v6 (eve)" {
  import "eve-service"
  check_command = "smtp"
  command_endpoint = "icingamaster.bsd.services"
  vars.smtp_port = "587"
  assign where host.name == "eve.thalheim.io"
}

apply Service "IMAP v4 (eve)" {
  import "eve-service"
  check_command = "imap"
  vars.imap_ipv4 = true
  assign where host.name == "eve.thalheim.io"
}

apply Service "IMAP v6 (eve)" {
  import "eve-service"
  check_command = "imap"
  vars.imap_ipv6 = true
  assign where host.name == "eve.thalheim.io"
}

apply Service "DNS v4 (eve)" {
  import "eve-service"
  check_command = "dig"
  vars.dig_lookup = "chelnok.de"
  vars.dig_server = host.address
  assign where host.name == "eve.thalheim.io"
}

apply Service "DNS v6 (eve)" {
  import "eve-service"
  check_command = "dig"
  vars.dig_lookup = "chelnok.de"
  vars.dig_server = host.address6
  vars.dig_ipv6 = true
  vars.dig_record_type = "AAAA"
  assign where host.name == "eve.thalheim.io"
}

apply Service "JABBER C2S (eve)" {
  import "eve-service"
  check_command = "jabber"
  vars.port = "5222"
  assign where host.name == "eve.thalheim.io"
}

apply Service "JABBER S2S (eve)" {
  import "eve-service"
  check_command = "jabber"
  vars.port = "5269"
  assign where host.name == "eve.thalheim.io"
}

apply Service "JABBER C2S v6 (eve)" {
  import "eve-service"
  check_command = "jabber6"
  vars.port = "5222"
  assign where host.name == "eve.thalheim.io"
}

apply Service "JABBER S2S v6 (eve)" {
  import "eve-service"
  check_command = "jabber6"
  command_endpoint = "icingamaster.bsd.services"
  vars.port = "5269"
  assign where host.name == "eve.thalheim.io"
}

apply Service "NETDATA v4 (eve)" {
  import "eve-http4-service"
  vars.http_vhost = "netdata.thalheim.io"
  vars.http_expect_body_regex = "netdata dashboard"
  assign where host.name == "eve.thalheim.io"
}

apply Service "NETDATA v6 (eve)" {
  import "eve-http6-service"
  vars.http_vhost = "netdata.thalheim.io"
  vars.http_expect_body_regex = "netdata dashboard"
  assign where host.name == "eve.thalheim.io"
}

apply Service "NETDATA CERTIFICATE (eve)" {
  import "eve-http-service"
  vars.http_vhost= "netdata.thalheim.io"
  vars.http_certificate = "30"
  assign where host.name == "eve.thalheim.io"
}

object HostGroup "nixos-servers" {
  display_name = "Mic92's Servers"
  assign where host.vars.os == "NixOS"
}

object User "mic92-email" {
  import "generic-user"

  display_name = "Icinga 2 Admin"
  groups = [ "eveadmins" ]

  email = "joerg@thalheim.io"
}

object User "mic92-pushover" {
  import "generic-user"

  display_name = "Icinga 2 Admin"
  groups = [ "eveadmins" ]

  email = "uxvxdokw8k@pomail.net"
}

object UserGroup "eveadmins" {
  display_name = "Eve Admin Group"
}

object Host "eve.thalheim.io" {
  import "eve-host"
  address = "188.68.39.17"
  address6 = "2a03:4000:13:31e::1"
  vars.os = "NixOS"
  vars.noagent = true
  vars.notification["mail"] = {
    groups = [ "eveadmins" ]
  }
}
